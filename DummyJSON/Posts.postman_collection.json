{
	"info": {
		"_postman_id": "cdb97359-c65d-44d0-9dbf-b6cf05cd03f4",
		"name": "Posts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29565430"
	},
	"item": [
		{
			"name": "Get all posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Posts array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.posts).to.exist;",
							"    pm.expect(responseData.posts).to.be.an('array').that.has.lengthOf(1);",
							"});",
							"",
							"",
							"pm.test(\"Validate the fields in each post object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post).to.have.property('id').that.is.a('number');",
							"        pm.expect(post).to.have.property('title').that.is.a('string');",
							"        pm.expect(post).to.have.property('body').that.is.a('string');",
							"        pm.expect(post).to.have.property('tags').that.is.an('array');",
							"        pm.expect(post).to.have.property('reactions').that.is.an('object');",
							"        pm.expect(post).to.have.property('views').that.is.a('number');",
							"        pm.expect(post).to.have.property('userId').that.is.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit fields are present and have non-negative integer values\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    const fieldsToCheck = [\"total\", \"skip\", \"limit\"];",
							"    fieldsToCheck.forEach(field => {",
							"        pm.expect(responseData[field]).to.exist;",
							"        pm.expect(responseData[field]).to.be.a('number');",
							"        pm.expect(responseData[field]).to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the post object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.title).to.be.a('string');",
							"  pm.expect(responseData.body).to.be.a('string');",
							"  pm.expect(responseData.tags).to.be.an('array');",
							"  pm.expect(responseData.reactions).to.be.an('object');",
							"  pm.expect(responseData.reactions.likes).to.be.a('number');",
							"  pm.expect(responseData.reactions.dislikes).to.be.a('number');",
							"  pm.expect(responseData.views).to.be.a('number');",
							"  pm.expect(responseData.userId).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Tags array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.tags).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Posts array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.posts).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each post object has non-negative integers for likes, dislikes, and views\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post.reactions.likes).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(post.reactions.dislikes).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(post.views).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.total).to.be.a('number').and.to.be.at.least(0);",
							"  pm.expect(responseData.skip).to.be.a('number').and.to.be.at.least(0);",
							"  pm.expect(responseData.limit).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/search?q=love",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "love"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Posts array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.posts).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Each post in the array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.be.an('array');",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post).to.have.property('id');",
							"        pm.expect(post).to.have.property('title');",
							"        pm.expect(post).to.have.property('body');",
							"        pm.expect(post).to.have.property('tags');",
							"        pm.expect(post).to.have.property('reactions');",
							"        pm.expect(post).to.have.property('views');",
							"        pm.expect(post).to.have.property('userId');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  responseData.posts.forEach(post => {",
							"    pm.expect(responseData.total).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.skip).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.limit).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts?sortBy=title&order=asc",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "sortBy",
							"value": "title"
						},
						{
							"key": "order",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts tags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - slug, name, and url\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('slug');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('url');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Slug is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.slug).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"URL is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(tag) {",
							"        pm.expect(tag.url).to.match(/^https?:\\/\\/.*/, \"URL should be in a valid format\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/tags",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"tags"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get posts tag list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Array should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Array elements are in the expected format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(element) {",
							"        pm.expect(element).to.be.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/tag-list",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"tag-list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get posts by a tag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Posts array should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.exist;",
							"    pm.expect(responseData.posts).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each post in the array should have an id, title, body, tags, reactions, views, and userId\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post.id).to.exist;",
							"        pm.expect(post.title).to.exist;",
							"        pm.expect(post.body).to.exist;",
							"        pm.expect(post.tags).to.exist;",
							"        pm.expect(post.reactions).to.exist;",
							"        pm.expect(post.views).to.exist;",
							"        pm.expect(post.userId).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit fields are present with appropriate values\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.skip).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.limit).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate post properties\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    responseData.posts.forEach(post => {",
							"        pm.expect(post.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"        pm.expect(post.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");",
							"        pm.expect(post.tags).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Tags should not be empty\");",
							"        pm.expect(post.reactions.likes).to.be.a('number').and.to.be.at.least(0, \"Likes should be non-negative\");",
							"        pm.expect(post.reactions.dislikes).to.be.a('number').and.to.be.at.least(0, \"Dislikes should be non-negative\");",
							"        pm.expect(post.views).to.be.a('number').and.to.be.at.least(0, \"Views should be non-negative\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/tag/life",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"tag",
						"life"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all posts by user id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Posts array should have the correct structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.be.an('array');",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post).to.be.an('object');",
							"        pm.expect(post).to.have.property('id').that.is.a('number');",
							"        pm.expect(post).to.have.property('title').that.is.a('string');",
							"        pm.expect(post).to.have.property('body').that.is.a('string');",
							"        pm.expect(post).to.have.property('tags').that.is.an('array');",
							"        pm.expect(post).to.have.property('reactions').that.is.an('object');",
							"        pm.expect(post.reactions).to.have.property('likes').that.is.a('number');",
							"        pm.expect(post.reactions).to.have.property('dislikes').that.is.a('number');",
							"        pm.expect(post).to.have.property('views').that.is.a('number');",
							"        pm.expect(post).to.have.property('userId').that.is.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Reactions object has the correct structure and data types\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.posts).to.be.an('array');",
							"    pm.expect(responseData.posts).to.have.lengthOf.at.least(1, \"At least one post should be present\");",
							"",
							"    responseData.posts.forEach(function(post) {",
							"        pm.expect(post.reactions).to.be.an('object');",
							"        pm.expect(post.reactions.likes).to.be.a('number');",
							"        pm.expect(post.reactions.dislikes).to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    responseData.posts.forEach(post => {",
							"        pm.expect(responseData.total).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(responseData.skip).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(responseData.limit).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/user/5",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"user",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get post's comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Comments array and its elements have the correct structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.comments).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    ",
							"    responseData.comments.forEach(function(comment) {",
							"        pm.expect(comment).to.have.property('id').that.is.a('number');",
							"        pm.expect(comment).to.have.property('body').that.is.a('string');",
							"        pm.expect(comment).to.have.property('postId').that.is.a('number');",
							"        pm.expect(comment).to.have.property('likes').that.is.a('number');",
							"        ",
							"        pm.expect(comment.user).to.be.an('object');",
							"        pm.expect(comment.user).to.have.property('id').that.is.a('number');",
							"        pm.expect(comment.user).to.have.property('username').that.is.a('string');",
							"        pm.expect(comment.user).to.have.property('fullName').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total, skip, and limit are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.total).to.exist;",
							"    pm.expect(responseData.skip).to.exist;",
							"    pm.expect(responseData.limit).to.exist;",
							"    ",
							"    pm.expect(responseData.total).to.be.a('number');",
							"    pm.expect(responseData.skip).to.be.a('number');",
							"    pm.expect(responseData.limit).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"User object contains expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('comments').that.is.an('array').with.length.above(0);",
							"    ",
							"    responseData.comments.forEach(function(comment) {",
							"        pm.expect(comment.user).to.have.property('id').that.is.a('number');",
							"        pm.expect(comment.user).to.have.property('username').that.is.a('string');",
							"        pm.expect(comment.user).to.have.property('fullName').that.is.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/1/comments",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a new post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response message is descriptive and user-friendly\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response message should be descriptive and user-friendly\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 252,\r\n    \"title\": \"The importance of kindness\",\r\n    \"body\": \"He had always believed in the power of kindness, a value his father instilled in him from a young age. He treated everyone with respect and dignity, no matter their background or beliefs. However, in the face of growing hostility, he began to question whether kindness alone was enough.\",\r\n    \"tags\": [\r\n        \"philosophy\",\r\n        \"personal development\",\r\n        \"social\"\r\n    ],\r\n    \"reactions\": {\r\n        \"likes\": 135,\r\n        \"dislikes\": 10\r\n    },\r\n    \"views\": 220,\r\n    \"userId\": 102\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts/add",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Body is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"UserId is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.userId).to.be.a('number');",
							"  pm.expect(responseData.userId).to.be.at.least(0, \"UserId should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"I think I should shift to the moon\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence of id, title, body, tags, reactions, views, userId, isDeleted, and deletedOn in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.title).to.exist;",
							"    pm.expect(responseData.body).to.exist;",
							"    pm.expect(responseData.tags).to.exist;",
							"    pm.expect(responseData.reactions).to.exist;",
							"    pm.expect(responseData.views).to.exist;",
							"    pm.expect(responseData.userId).to.exist;",
							"    pm.expect(responseData.isDeleted).to.exist;",
							"    pm.expect(responseData.deletedOn).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Tags array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.tags).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Likes and dislikes in reactions are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.reactions.likes).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.reactions.dislikes).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/posts/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}