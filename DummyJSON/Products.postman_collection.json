{
	"info": {
		"_postman_id": "9ecc812a-c8a1-49c2-baf5-32a915772964",
		"name": "Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29565430"
	},
	"item": [
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the product object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.title).to.be.a('string');",
							"    pm.expect(responseData.description).to.be.a('string');",
							"    pm.expect(responseData.category).to.be.a('string');",
							"    pm.expect(responseData.price).to.be.a('number');",
							"    pm.expect(responseData.discountPercentage).to.be.a('number');",
							"    pm.expect(responseData.rating).to.be.a('number');",
							"    pm.expect(responseData.stock).to.be.a('number');",
							"    pm.expect(responseData.tags).to.be.an('array');",
							"    pm.expect(responseData.brand).to.be.a('string');",
							"    pm.expect(responseData.sku).to.be.a('string');",
							"    pm.expect(responseData.weight).to.be.a('number');",
							"    pm.expect(responseData.dimensions).to.be.an('object');",
							"    pm.expect(responseData.dimensions.width).to.be.a('number');",
							"    pm.expect(responseData.dimensions.height).to.be.a('number');",
							"    pm.expect(responseData.dimensions.depth).to.be.a('number');",
							"    pm.expect(responseData.warrantyInformation).to.be.a('string');",
							"    pm.expect(responseData.shippingInformation).to.be.a('string');",
							"    pm.expect(responseData.availabilityStatus).to.be.a('string');",
							"    pm.expect(responseData.reviews).to.be.an('array');",
							"    responseData.reviews.forEach(function(review) {",
							"        pm.expect(review.rating).to.be.a('number');",
							"        pm.expect(review.comment).to.be.a('string');",
							"        pm.expect(review.date).to.be.a('string');",
							"        pm.expect(review.reviewerName).to.be.a('string');",
							"        pm.expect(review.reviewerEmail).to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/);",
							"    });",
							"    pm.expect(responseData.returnPolicy).to.be.a('string');",
							"    pm.expect(responseData.minimumOrderQuantity).to.be.a('number');",
							"    pm.expect(responseData.meta).to.be.an('object');",
							"    pm.expect(responseData.meta.createdAt).to.be.a('string');",
							"    pm.expect(responseData.meta.updatedAt).to.be.a('string');",
							"    pm.expect(responseData.meta.barcode).to.be.a('string');",
							"    pm.expect(responseData.meta.qrCode).to.be.a('string');",
							"    pm.expect(responseData.images).to.be.an('array');",
							"    pm.expect(responseData.thumbnail).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.price).to.be.a('number');",
							"    pm.expect(responseData.price).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Reviews array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.reviews).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/products/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/search?q=phone",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "phone"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sort products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Products array in the response should exist and be an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.products).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Total, Skip, and Limit fields are present and have valid values\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('total').that.is.a('number');",
							"  pm.expect(responseData).to.have.property('skip').that.is.a('number');",
							"  pm.expect(responseData).to.have.property('limit').that.is.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Tags array must not be empty and should contain at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.products).to.be.an('array');",
							"    responseData.products.forEach(product => {",
							"        pm.expect(product.tags).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Tags array should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products?sortBy=title&order=asc",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "sortBy",
							"value": "title"
						},
						{
							"key": "order",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - slug, name, and url\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property('slug');",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('url');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Slug is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.slug).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Slug should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(category) {",
							"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"URL is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.url).to.match(/^https?:\\/\\/[\\w\\-\\.]+/);",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/categories",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products category list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Array is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/category-list",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"category-list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products by a category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('products').that.is.an('array');",
							"    responseData.products.forEach(function(product) {",
							"        pm.expect(product).to.have.property('id').that.is.a('number');",
							"        pm.expect(product).to.have.property('title').that.is.a('string');",
							"        pm.expect(product).to.have.property('description').that.is.a('string');",
							"        pm.expect(product).to.have.property('category').that.is.a('string');",
							"        pm.expect(product).to.have.property('price').that.is.a('number');",
							"        pm.expect(product).to.have.property('discountPercentage').that.is.a('number');",
							"        pm.expect(product).to.have.property('rating').that.is.a('number');",
							"        pm.expect(product).to.have.property('stock').that.is.a('number');",
							"        pm.expect(product).to.have.property('tags').that.is.an('array');",
							"        pm.expect(product).to.have.property('brand').that.is.a('string');",
							"        pm.expect(product).to.have.property('sku').that.is.a('string');",
							"        pm.expect(product).to.have.property('weight').that.is.a('number');",
							"        pm.expect(product).to.have.property('dimensions').that.is.an('object');",
							"        pm.expect(product).to.have.property('warrantyInformation').that.is.a('string');",
							"        pm.expect(product).to.have.property('shippingInformation').that.is.a('string');",
							"        pm.expect(product).to.have.property('availabilityStatus').that.is.a('string');",
							"        pm.expect(product).to.have.property('reviews').that.is.an('array');",
							"        pm.expect(product).to.have.property('returnPolicy').that.is.a('string');",
							"        pm.expect(product).to.have.property('minimumOrderQuantity').that.is.a('number');",
							"        pm.expect(product).to.have.property('meta').that.is.an('object');",
							"        pm.expect(product).to.have.property('images').that.is.an('array');",
							"        pm.expect(product).to.have.property('thumbnail').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.products).to.be.an('array');",
							"    responseData.products.forEach(function(product) {",
							"        pm.expect(product.price).to.be.a('number');",
							"        pm.expect(product.price).to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Reviews array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.reviews).to.be.an('array');",
							"    pm.expect(responseData.reviews.length).to.equal(1);",
							"});",
							"",
							"",
							"pm.test(\"Meta object has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.meta).to.exist;",
							"    pm.expect(responseData.meta).to.have.property('createdAt');",
							"    pm.expect(responseData.meta).to.have.property('updatedAt');",
							"    pm.expect(responseData.meta).to.have.property('barcode');",
							"    pm.expect(responseData.meta).to.have.property('qrCode');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/category/smartphones",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"category",
						"smartphones"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Validate the product object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.title).to.be.a('string');",
							"    pm.expect(responseData.price).to.be.a('number');",
							"    pm.expect(responseData.discountPercentage).to.be.a('number');",
							"    pm.expect(responseData.stock).to.be.a('number');",
							"    pm.expect(responseData.rating).to.be.a('number');",
							"    pm.expect(responseData.images).to.be.an('array');",
							"    pm.expect(responseData.thumbnail).to.be.a('string');",
							"    pm.expect(responseData.description).to.be.a('string');",
							"    pm.expect(responseData.brand).to.be.a('string');",
							"    pm.expect(responseData.category).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Price should be a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.price).to.be.a('number');",
							"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
							"});",
							"",
							"",
							"pm.test(\"Images array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.images).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Title, description, brand, and category are non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  ",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"  pm.expect(responseData.brand).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Brand should not be empty\");",
							"  pm.expect(responseData.category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"title\": \"Revolution Skincare Retinol Serum\",\r\n    \"description\": \"The Revolution Skincare Retinol Serum is a powerful anti-aging treatment designed to reduce the appearance of fine lines and wrinkles. Formulated with high-quality retinol, this serum helps improve skin texture and tone.\",\r\n    \"category\": \"skincare\",\r\n    \"price\": 12.99,\r\n    \"discountPercentage\": 10.00,\r\n    \"rating\": 4.78,\r\n    \"stock\": 10,\r\n    \"tags\": [\r\n        \"skincare\",\r\n        \"serum\",\r\n        \"anti-aging\"\r\n    ],\r\n    \"brand\": \"Revolution Skincare\",\r\n    \"sku\": \"RSC85T2B\",\r\n    \"weight\": 50,\r\n    \"dimensions\": {\r\n        \"width\": 5.00,\r\n        \"height\": 12.00,\r\n        \"depth\": 5.00\r\n    },\r\n    \"warrantyInformation\": \"6 months warranty\",\r\n    \"shippingInformation\": \"Ships in 2 weeks\",\r\n    \"availabilityStatus\": \"In Stock\",\r\n    \"reviews\": [\r\n        {\r\n            \"rating\": 5,\r\n            \"comment\": \"This serum worked wonders for my skin!\",\r\n            \"date\": \"2024-05-25T10:30:21.618Z\",\r\n            \"reviewerName\": \"Emma Johnson\",\r\n            \"reviewerEmail\": \"emma.johnson@x.dummyjson.com\"\r\n        },\r\n        {\r\n            \"rating\": 4,\r\n            \"comment\": \"Great product, but the scent is a bit strong.\",\r\n            \"date\": \"2024-05-24T12:20:00.618Z\",\r\n            \"reviewerName\": \"David Smith\",\r\n            \"reviewerEmail\": \"david.smith@x.dummyjson.com\"\r\n        },\r\n        {\r\n            \"rating\": 3,\r\n            \"comment\": \"I didn't notice much of a difference after using it.\",\r\n            \"date\": \"2024-05-23T08:56:21.618Z\",\r\n            \"reviewerName\": \"Sophie Brown\",\r\n            \"reviewerEmail\": \"sophie.brown@x.dummyjson.com\"\r\n        }\r\n    ],\r\n    \"returnPolicy\": \"30 days return policy\",\r\n    \"minimumOrderQuantity\": 1,\r\n    \"meta\": {\r\n        \"createdAt\": \"2024-05-23T08:56:21.618Z\",\r\n        \"updatedAt\": \"2024-05-23T08:56:21.618Z\",\r\n        \"barcode\": \"1234567890123\",\r\n        \"qrCode\": \"https://assets.dummyjson.com/public/qr-code2.png\"\r\n    },\r\n    \"images\": [\r\n        \"https://cdn.dummyjson.com/products/images/skincare/Revolution%20Skincare%20Retinol%20Serum/1.png\"\r\n    ],\r\n    \"thumbnail\": \"https://cdn.dummyjson.com/products/images/skincare/Revolution%20Skincare%20Retinol%20Serum/thumbnail.png\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/products/add",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the product object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.title).to.be.a('string');",
							"    pm.expect(responseData.price).to.be.a('number');",
							"    pm.expect(responseData.discountPercentage).to.be.a('number');",
							"    pm.expect(responseData.stock).to.be.a('number');",
							"    pm.expect(responseData.rating).to.be.a('number');",
							"    pm.expect(responseData.images).to.be.an('array');",
							"    pm.expect(responseData.thumbnail).to.be.a('string');",
							"    pm.expect(responseData.description).to.be.a('string');",
							"    pm.expect(responseData.brand).to.be.a('string');",
							"    pm.expect(responseData.category).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.price).to.be.a('number');",
							"  pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
							"});",
							"",
							"",
							"pm.test(\"Images array is present and not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.images).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Images array should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"iPhone Galaxy +1\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/products/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Tags array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('tags').that.is.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"IsDeleted is set to true and deletedOn is empty\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.isDeleted).to.equal(true);",
							"    pm.expect(responseData.deletedOn).to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/products/1",
					"host": [
						"{{URL}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		}
	]
}